---
- name: include distribution specific task
  include: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}_{{ ansible_distribution_version }}.yml"

- name: Determine available groups
  getent:
    database: group

- name: determine available users
  getent:
    database: passwd

- name: Download package only
  tags: download_package
  block:
    - name: Make a directory to store a package for tomcat
      file:
        path: /root/tomcat
        state: directory
    - name: Download a tomcat 9
      get_url:
        url: https://dlcdn.apache.org/tomcat/tomcat-9/v9.0.64/bin/{{ tomcat_files['apache-tomcat']['package'] }}
        dest: /root/tomcat
    - name: Copy a apr library to a tomcat
      ansible.builtin.copy:
        src: "{{ tomcat_files['apr']['package'] }}"
        dest: /root/tomcat
    - name: Copy a apr-utils library to a tomcat
      ansible.builtin.copy:
        src: "{{ tomcat_files['apr-util']['package'] }}"
        dest: /root/tomcat

- name: Add the user of Tomcat with a specific uid and a primary group of Tomcat
  tags: tomcat_account
  block:
    - name: Determine available groups
      getent:
        database: group

    - name: determine available users
      getent:
        database: passwd

    - name: Check a group if existing in a system
      set_fact:
        group_exist: true
      when: item in getent_group
      with_items:
        - "{{ tomcat_group.name }}"

    - name: Check a group's id if existing in system
      set_fact:
        gid_exist: true
      when: item[0].value[1] == item[1]
      with_nested: 
        - "{{ getent_group | dict2items }}"
        - "{{ tomcat_group.gid }}"

    - name: set a group of {{ tomcat_group.name }} with gid {{ tomcat_group.gid }} when not available
      ansible.builtin.group:
        name: "{{ tomcat_group['name'] }}"
        gid: "{{ tomcat_group['gid'] }}"
        state: present
      when: (group_exist is undefined) and (gid_exist is undefined)

    - name: Check a user if existing in a system
      set_fact:
        user_exist: true
      when: item in getent_passwd
      with_items:
        - "{{ tomcat_user.name }}"

    - name: Check a user's id if existing in a system
      set_fact:
        uid_exist: true
      when: item[0].value[1] == item[1]
      with_nested: 
        - "{{ getent_passwd | dict2items }}"
        - "{{ tomcat_user.uid }}"

    - name: Ensure user "Tomcat" exists with corrent uid
      ansible.builtin.user:
        name: "{{ tomcat_user['name'] }}"
        uid: "{{ tomcat_user['uid'] }}"
        password: "{{ tomcat_user['passwd'] }}"
        shell: "{{ tomcat_user['shell'] }}"
        comment: "{{ tomcat_user['comment'] }}"
        group: "{{ tomcat_user['group'] }}"
        createhome: yes                         # Defaults to yes
        home: "{{ tomcat_user['home_dir'] }}"          # Defaults to /home/<username>
        generate_ssh_key: no 
        ssh_key_bits: 4096
        state: present
      when: (user_exist is undefined) and (uid_exist is undefined)

- name: Extract a apr of binary package
  tags: extract_apr
  block:
  - name: Check if a apr package 
    ansible.builtin.stat:  
      path: /root/tomcat/{{ tomcat_files['apr']['package'] }} 
    register: apr_package_exist
  
  - name: Check if a directory of apr exists
    ansible.builtin.stat:
      path: /opt/{{ tomcat_files['apr']['directory'] }}
    register: apr_dir_exist
  
  - name: Check if a link of apr exists
    ansible.builtin.stat:
      path: /opt/{{ tomcat_files['apr']['name'] }}
    register: apr_link_exist
  
  - name: Extract a apr's binary package
    ansible.builtin.unarchive:
      src: /root/tomcat/{{ tomcat_files['apr']['package'] }} 
      dest: /opt/{{ tomcat_files['apr']['directory'] }}
      remote_src: true
    when: (apr_package_exist.stat.exists and apr_package_exist.stat.isreg) and not apr_dir_exist.stat.isdir
  
  - name: Make a symbolic link of apr
    ansible.builtin.file:
      src: /opt/{{ tomcat_files['apr']['directory'] }}
      dest: /opt/{{ tomcat_files['apr']['name'] }}
      state: link
    when: (apr_dir_exist.stat.exists and apr_dir_exist.stat.isdir) and ((apr_link_exist.stat.islnk is undefined) or (not apr_link_exist.stat.islnk))


- name: Extract a apr-util of binary package
  tags: extract_apr_util
  block:
  - name: Check if a apr-util package 
    ansible.builtin.stat:  
      path: /root/tomcat/{{ tomcat_files['apr-util']['package'] }} 
    register: apr_util_package_exist
  
  - name: Check if a directory of apr-util exists
    ansible.builtin.stat:
      path: /opt/{{ tomcat_files['apr-util']['directory'] }}
    register: apr_util_dir_exist
  
  - name: Check if a link of apr-util exists
    ansible.builtin.stat:
      path: /opt/{{ tomcat_files['apr-util']['name'] }}
    register: apr_util_link_exist
  
  - name: Extract a apr-util's binary package
    ansible.builtin.unarchive:
      src: /root/tomcat/{{ tomcat_files['apr-util']['package'] }} 
      dest: /opt/{{ tomcat_files['apr-util']['directory'] }}
      remote_src: true
    when: (apr_util_package_exist.stat.exists and apr_util_package_exist.stat.isreg) and not apr_util_dir_exist.stat.isdir
  
  - name: Make a symbolic link of apr-util
    ansible.builtin.file:
      src: /opt/{{ tomcat_files['apr-util']['directory'] }}
      dest: /opt/{{ tomcat_files['apr-util']['name'] }}
      state: link
    when: (apr_util_dir_exist.stat.exists and apr_util_dir_exist.stat.isdir) and ((apr_util_link_exist.stat.islnk is undefined) or (not apr_util_link_exist.stat.islnk))

- name: Extract a apache-tomcat of binary package
  tags: extract_tomcat
  block:
  - name: Check if a apache-tomcat package 
    ansible.builtin.stat:  
      path: /root/tomcat/{{ tomcat_files['apache-tomcat']['package'] }} 
    register: tomcat_package_exist
  
  - name: Check if a directory of apache-tomcat exists
    ansible.builtin.stat:
      path: /opt/{{ tomcat_files['apache-tomcat']['directory'] }}
    register: tomcat_dir_exist
  
  - name: Check if a link of apache-tomcat exists
    ansible.builtin.stat:
      path: /opt/{{ tomcat_files['apache-tomcat']['name'] }}
    register: tomcat_link_exist
  
  - name: Extract a apache-tomcat's binary package
    ansible.builtin.unarchive:
      src: /root/tomcat/{{ tomcat_files['apache-tomcat']['package'] }} 
      dest: /opt/{{ tomcat_files['apache-tomcat']['directory'] }}
      remote_src: true
    when: (tomcat_package_exist.stat.exists and tomcat_package_exist.stat.isreg) and not tomcat_dir_exist.stat.isdir
  
  - name: Make a symbolic link of apache-tomcat
    ansible.builtin.file:
      src: /opt/{{ tomcat_files['apache-tomcat']['directory'] }}
      dest: /opt/{{ tomcat_files['apache-tomcat']['name'] }}
      state: link
    when: (tomcat_dir_exist.stat.exists and tomcat_dir_exist.stat.isdir) and ((tomcat_link_exist.stat.islnk is undefined) or (not tomcat_link_exist.stat.islnk))

- name: Set a permission of file in tomcat's files/directories
  tags: tomcat_permission
  block:
  - name: Changed a permission of bin' directory in tomcat
    file:
      path: "{{ item }}"
      owner: root
      group: root
      mode: 0755
    with_items:
      - /opt/{{ tomcat_files['apache-tomcat']['directory'] }}/bin
      - /opt/{{ tomcat_files['apache-tomcat']['directory'] }}/lib

  - name: Get a files in tomcat's bin directory
    find:
      paths: /opt/{{ tomcat_files['apache-tomcat']['directory'] }}/bin
      patterns: '*.sh'
    register: tomcat_bin_shell

  - name: Changed a permission of file in the tomcat's bin directory
    file:
      path: "{{ item.path }}"
      owner: root
      group: root
      mode: 0755
    with_items: "{{ tomcat_bin_shell.files }}"

  - name: Get a files in tomcat's library directory
    find:
      path: /opt/{{ tomcat_files['apache-tomcat']['directory'] }}/lib
      patterns: '*.jar'
    register: tomcat_lib_file

  - name: Changed a permission of file in the tomcat's library directory
    file:
      path: "{{ item.path }}"
      owner: root
      group: root
      mode: 0644
    with_items: "{{ tomcat_lib_file.files }}"

- name: Make a base of tomcat server in the service
  tags: tomcat_make_base
  block:
    - name: determine available users
      getent:
        database: passwd
        
    - name: check a user in system if exists
      set_fact:
        user_exist: true
      when: item in getent_passwd
      with_items:
        - "{{ tomcat_user['name'] }}"

    - name: Make a directory of tomcat to be a base of home
      file:
        path: "{{ tomcat_user['home_dir'] }}/tomcat/{{ item }}"
        state: directory
        mode: 0755
        owner: "{{ tomcat_user['name'] }}"
        group: "{{ tomcat_user['uid'] }}"
      with_items: [bin, lib, logs, run, webapps, work, temp]
      when: user_exist is true

    - name: Copy a config of directory to a base of home
      ansible.builtin.copy:
        src: "/opt/{{ tomcat_files['apache-tomcat']['directory'] }}/conf"
        dest: "{{ tomcat_user['home_dir'] }}/tomcat"
        mode: 0755
        owner: "{{ tomcat_user['name'] }}"
        group: "{{ tomcat_user['uid'] }}"
        remote_src: true
    
    - name: Get a files in the base of tomcat config directory
      find:
        path: "{{ tomcat_user['home_dir'] }}/tomcat/conf"
        patterns: '*'
      register: tomcat_config_file

    - name: Changed a permission of file in the base of tomcat config directory
      file:
        path: "{{ item.path }}"
        owner: root
        group: root
        mode: 0705
      with_items: "{{ tomcat_config_file.files }}"
- name: Copy a file to run a tomcat
  tags: copy_tomcat_file
  block:
    - name: copy a file of shell to start a tomcat
      template:
        src: "{{ item }}"
        dest: "{{ tomcat_user['home_dir'] }}/tomcat/bin/{{ item | basename | regex_replace('\\.j2$', '') }}"
        owner: root
        group: root
        mode: 0705
      with_items: 
        - startup.sh.j2
        - shutdown.sh.j2
        - setenv.sh.j2