---
- name: Set permission to files
  tags: setPermission
  block:
    - name: Unlock files
      file:
        path: "{{ lock_file.path }}"
        attr: -i
      with_items: "{{ lock_files }}"
      loop_control:
        loop_var: lock_file

    - name: Set default value in /etc/profile
      blockinfile:
        path: /etc/profile
        block: |
          # set umask 
          umask 022
          # set session timeout in sh, ksh, bash
          TMOUT=600
          export umask TMOUT

    - name: Set session timeout in csh.login, csh.cshrc
      blockinfile:
        path: "{{ item }}"
        block: "set autologout=10"
      with_items:
        - /etc/csh.login
        - /etc/csh.cshrc

    # Granting write access to this directory for non-privileged users could provide
    # them the means for gaining unauthorized elevated privileges.
    # Granting read access to this directory could give an unprivileged user insight
    # in how to gain elevated privileges or circumvent auditing controls.
    # CIS 5.1.2 - CIS 5.1.7
    #
    - name: Find cron files and directories
      find:
        paths:
          - /etc
        patterns:
          - cron.hourly
          - cron.daily
          - cron.weekly
          - cron.monthly
          - cron.d
          - crontab
          - cron.deny
        file_type: any
      register: cron_directories

    - name: Ensure permissions on cron files and directories are configured
      ansible.builtin.file:
        path: "{{ item.path }}"
        owner: root
        group: root
        mode: og-rwx
      with_items: "{{ cron_directories.files }}"

    - name: Set permission to files
      file:
        path: "{{ file_items.path }}"
        owner: "{{ file_items.owner }}"
        group: "{{ file_items.group }}"
        mode: "{{ file_items.mode }}"
      with_items: "{{ change_permission_files }}"
      loop_control:
        loop_var: file_items

    # Set pemission for /etc/xinetd.d
    - name: Set permission for /etc/xinetd.d
      file:
        path: /etc/xinetd.d
        owner: root
        group: root
        mode: 0640
        recurse: yes

    - name: Lock file protect a modification.
      file:
        path: "{{ lock_file.path }}"
        attr: +i
      with_items: "{{ lock_files }}"
      loop_control:
        loop_var: lock_file

- name: Remove a setuid to file
  tags: remove_setuid
  block:
  - name: Obtain a file if it exist.
    stat:
      path: "{{ file_items.path }}"
    register: target_files
    with_items: "{{ remove_setuid_files }}"
    loop_control:
      loop_var: file_items

  - name: Remove a setuid to a file
    file:
      path: "{{ target_item.file_items.path }}"
      mode: u-s
    with_items: "{{ target_files.results }}"
    when: target_item.stat.exists == True
    loop_control:
      loop_var: target_item

  # - name: Remove a setuid to a file (Debug)
  #   debug:
  #     msg: "{{ target_item.file_items.path }}"
  #   with_items: "{{ target_files.results }}"
  #   when: target_item.stat.exists == True
  #   loop_control:
  #     loop_var: target_item

- name: Check the contains a '.:'
  tags: check_path_root
  block:
  - name: Get all users
    getent: 
      database: passwd

  - name: Select actual users
    set_fact: 
      system_users: "{{ getent_passwd|
                  dict2items|
                  json_query('[? contains(value,`/bin/bash`)].key') }}" # account name

  - name: check root path
    check_user_path_env:
      system_account: "{{ account }}"
    with_items: 
      - "{{ system_users }}"
    loop_control:
      loop_var: account

- name: check .rhosts, .rlogin files
  tags: check_rfiles
  block:
  - name: Get all users
    getent: 
      database: passwd

  - name: Select actual users
    set_fact: 
      system_user_home: "{{ getent_passwd|
                  dict2items|
                  json_query('[? contains(value,`/bin/bash`)].value[4]') }}"
                  # json_query('[? contains(value,`/bin/bash`)].key') }}" # account name

  - name: Check existing rfiles
    check_rfiles:
      home_dir: "{{ home_dir }}"
      rfiles:
        - .rhosts
        - .rlogin
    with_items: 
      - "{{ system_user_home }}"
    loop_control:
      loop_var: home_dir

- name: Check permission and owner for bootstrap files
  tags: check_bootstrap_files
  block:
  - name: Get all users
    getent: 
      database: passwd

  - name: Select actual users
    set_fact: 
      system_user_home: "{{ getent_passwd|
                  dict2items|
                  json_query('[? contains(value,`/bin/bash`)].value[4]') }}" # account name

  - name: check bootstrap files
    file:
      path: "{{ file_items.0 }}/{{ file_items.1 }}"
      owner: "{{ file_items.0.rsplit('/',1)[1] }}"
      #group: "{{ file_items.0.rsplit('/',1)[1] }}"
      mode: 0644
    ignore_errors: yes
    with_nested:
      - "{{ system_user_home }}"
      - ['.profile', '.kshrc', '.bashrc', '.bash_profile']
    loop_control:
      loop_var: file_items