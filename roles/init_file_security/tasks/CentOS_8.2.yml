---
- name: Set default value in /etc/profile
  blockinfile:
    path: /etc/profile
    block: |
      # set umask 
      umask 022
      # set session timeout in sh, ksh, bash
      TMOUT=600
      export umask TMOUT
  tags:
    - profile

- name: Set session timeout in csh.login, csh.cshrc
  blockinfile:
    path: "{{ item }}"
    block: "set autologout=10"
  with_items:
    - /etc/csh.login
    - /etc/csh.cshrc
  tags: csh_env

# set permission for cron directory
- import_tasks: cron.yml
  tags: cron

# set permission for /etc/password
- name: Set permission files
  tags: set_permission
  block:
  - name: Check a file if it exist
    stat:
      path: "{{ file_item.path }}"
    with_items: "{{ change_permission_files }}"
    loop_control:
      loop_var: file_item
    register: check_files

  - name: Set permission for files
    file:
      path: "{{ file_items.file_item.path }}"
      owner: "{{ file_items.file_item.owner }}"
      group: "{{ file_items.file_item.group }}"
      mode: "{{ file_items.file_item.mode }}"
    with_items: "{{ check_files.results }}"
    when: file_items.stat.exists
    loop_control:
      loop_var: file_items
  
  # Set pemission for /etc/xinetd.d
  - name: Set permission for /etc/xinetd.d
    file:
      path: /etc/xinetd.d
      owner: root
      group: root
      mode: 0600      # original 0755
      recurse: yes

- name: Remove a setuid to file
  tags: remove_setuid
  block:
  - name: Obtain a file if it exist.
    stat:
      path: "{{ file_items.path }}"
    register: target_files
    with_items: "{{ remove_setuid_files }}"
    loop_control:
      loop_var: file_items

  - name: Remove a setuid to a file
    file:
      path: "{{ target_item.file_items.path }}"
      mode: u-s
    with_items: "{{ target_files.results }}"
    when: target_item.stat.exists == True
    loop_control:
      loop_var: target_item

  # - name: Remove a setuid to a file (Debug)
  #   debug:
  #     msg: "{{ target_item.file_items.path }}"
  #   with_items: "{{ target_files.results }}"
  #   when: target_item.stat.exists == True
  #   loop_control:
  #     loop_var: target_item

- name: Check the contains a '.:'
  tags: check_path_root
  block:
  - name: Get all users
    getent: 
      database: passwd

  - name: Select actual users
    set_fact: 
      system_users: "{{ getent_passwd|
                  dict2items|
                  json_query('[? contains(value,`/bin/bash`)].key') }}" # account name

  - name: check root path
    check_user_path_env:
      system_account: "{{ account }}"
    with_items: 
      - "{{ system_users }}"
    loop_control:
      loop_var: account

- name: check .rhosts, .rlogin files
  tags: check_rfiles
  block:
  - name: Get all users
    getent: 
      database: passwd

  - name: Get home directory to the users in system
    set_fact: 
      system_user_home: "{{ getent_passwd|
                  dict2items|
                  json_query('[? contains(value,`/bin/bash`) || contains(value, `/bin/csh`) || contains(value, `/bin/zsh`) || contains(value, `/bin/csh`)].value[4]') }}"
                  # json_query('[? contains(value,`/bin/bash`)].key') }}" # account name

  - name: Check home directory base on '/home'
    check_home_dir:
      home_dir: "{{ home_dir }}"
    with_items:
      - "{{ system_user_home }}"
    loop_control:
      loop_var: home_dir

  - name: Check existing rfiles(.rhosts, .rlogin, .rsh)
    check_rfiles:
      home_dir: "{{ home_dir }}"
      rfiles:
        - .rhosts
        - .rlogin
        - .rsh
    with_items: 
      - "{{ system_user_home }}"
    loop_control:
      loop_var: home_dir

- name: Check permission and owner for bootstrap files
  tags: check_bootstrap_files
  block:
  - name: Get all users
    getent: 
      database: passwd

  - name: Select actual users
    set_fact: 
      system_user_home: "{{ getent_passwd|
                  dict2items|
                  json_query('[? contains(value,`/bin/bash`)].value[4]') }}" # account name

  - name: check bootstrap files
    file:
      path: "{{ file_items.0 }}/{{ file_items.1 }}"
      owner: "{{ file_items.0.rsplit('/',1)[1] }}"
      #group: "{{ file_items.0.rsplit('/',1)[1] }}"
      mode: 0644
    ignore_errors: true
    with_nested:
      - "{{ system_user_home }}"
      - ['.profile', '.kshrc', '.cshrc', '.login', '.bashrc', '.bash_profile']
    loop_control:
      loop_var: file_items